############
### Cloudformation script to push realtime collect logs from VPC, cloudwatch Cloudwatch events into kinesis firehose and into Splunk for analysis ###
############
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: This Template deploys a Kinesis Firehose for Splunk.

# Mapping of bucket names and regions
# Mappings:
#   BucketMap:
#     eu-central-1:
#       BucketName: eu-central-1-lambda
#     eu-west-1:
#       BucketName: eu-west-1-lambda

Parameters:
  SplunkHecURL:
    Type: String
    Default: 'https://xyz.com:8088'  #

  SplunkHecToken:
    Type: String
    Default: '1234-************-3421'

  VpcName:
    Type: AWS::EC2::VPC::Id
    Description: VPC Identifier
    Default: vpc-1234*** #Edge-vpc in networking account

  BucketNameValue:
    Type: String
    Default: eu-west-1-lambda
  
  # # zip file residing in 'BucketNameValue' has .js script for Lambda
  # FileCode: # need to move the function.zip to S3 using CF
  #   Type: String
  #   Default: function.zip
  
  # FileCodeCWE:
  #   Type: String
  #   Default: splunk_cwe_firehose_processor_v0.3.zip
  
  # FileCodeCWL:
  #   Type: String
  #   Default: splunk_cwl_firehose_processor_v0.3.zip
  
  # FileCodeVPC:
  #   Type: String
  #   Default: splunk_vpc_firehose_processor_v0.3.zip

  LogGroupNameLabel:
    Type: String
    Default: VPCtoSplunkLogGroup2
  
  CWtoFHRoleName:
    Type: String
    Default: CWtoFHRole2

  VCPtoCloudwatchRoleName:
    Type: String
    Default: VCPtoCloudwatchRole2

  Workvalue:
    Type: String
    Default: -work02
  
  # FirehoseLambdaRoleName:
  #   Type: String
  #   Default: FirehoseLambdaRole2
  
  # FunctionLambda4FirehoseName:
  #   Type: String
  #   Default: FunctionLambda4Firehose
  
  FunctionLambda4FirehoseNameCWE:
    Type: String
    Default: FunctionLambda4FirehoseCWE1

  FunctionLambda4FirehoseNameCWL:
    Type: String
    Default: FunctionLambda4FirehoseCWL1

  FunctionLambda4FirehoseNameVPC:
    Type: String
    Default: FunctionLambda4FirehoseVPC1
  
  FireHoseRoleName:
    Type: String
    Default: FireHoseRole2
  
  FlowLogsToSplunkName:
    Type: String
    Default: FlowLogsToSplunk2
  
  # WriteLambdaLogsName:
  #   Type: String
  #   Default: WriteLambdaLogs2

Resources:
  # NestedCall:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: https://1234********.amazonaws.com/s3cft.yml
  #     TimeoutInMinutes: 60

  ### Firehose's work bucket
  S3BucketBkp:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - ''
        - - 'firehose-'
          - !Ref 'AWS::AccountId'
          - !Ref 'Workvalue'
      VersioningConfiguration:
        Status: Enabled

  ### Lambda Function Role + Inline policy for logs
  # LambdaRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     RoleName: !Ref FirehoseLambdaRoleName
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #             - lambda.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: "/"
  #     Policies:
  #       - PolicyName: !Ref WriteLambdaLogsName
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - 'logs:CreateLogGroup'
  #               Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
  #             - Effect: Allow
  #               Action:
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionLambda4FirehoseName}'

  ### Firehose Role for Streams + Inline policy for the Role
  FireHoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref FireHoseRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: firehose_2_splunk_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketNameValue}'
                  - !Sub 'arn:aws:s3:::${S3BucketBkp}'
                  - !Sub 'arn:aws:s3:::${S3BucketBkp}/*'
              - Effect: Allow
                Action:
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt VPCFirehoseProcessorLambdaFunction.Arn
                  - !Join [':',[!GetAtt VPCFirehoseProcessorLambdaFunction.Arn,'$LATEST']]
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/${FlowLogsToSplunkName}:log-stream:*'
              - Effect: Allow
                Action: 
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:ListShards'
                Resource:
                  - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%'

  ### Lambda Function that unzips files
  # LambdaFunction:
  #   Type: 'AWS::Lambda::Function'
  #   Properties:
  #     Description: "Function based in a Lambda blueprint to decompress zips"
  #     FunctionName: !Ref FunctionLambda4FirehoseName
  #     Handler: index.handler
  #     Role: !GetAtt LambdaRole.Arn
  #     Code:
  #       S3Bucket:
  #         Fn::FindInMap:
  #           - BucketMap
  #           - Ref: AWS::Region
  #           - BucketName
  #       S3Key: !Ref FileCode
  #     Runtime: nodejs12.x
  #     Timeout: 180
  #     TracingConfig:
  #       Mode: PassThrough
  #   DependsOn:
  #     - LambdaRole

  ### Lambda Function that unzips files
  # LambdaFunction:
  #   Type: "AWS::Serverless::Function"
  #   Properties:
  #     Description: "Function based in a Lambda blueprint to decompress zips"
  #     FunctionName: !Ref FunctionLambda4FirehoseName
  #     CodeUri: ./src/CWE
  #     Handler: lambda_function.handler
  #     Runtime: nodejs12.x
  #     Timeout: 180
  #     Tracing: Active
  #     Role: !GetAtt LambdaRole.Arn
  #   DependsOn:
  #     - LambdaRole
  
  ### Firehose that sends VPC Flow logs to Splunk
  FHtoSplunk:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !Ref FlowLogsToSplunkName
      DeliveryStreamType: DirectPut
      SplunkDestinationConfiguration:
        HECAcknowledgmentTimeoutInSeconds: 180
        HECEndpoint: !Ref SplunkHecURL
        HECEndpointType: Raw
        HECToken: !Ref SplunkHecToken
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
              - ParameterName: LambdaArn
                ParameterValue: !GetAtt VPCFirehoseProcessorLambdaFunction.Arn
              - ParameterName: RoleArn
                ParameterValue: !GetAtt FireHoseRole.Arn
              Type: Lambda
        RetryOptions:
          DurationInSeconds: 300
        S3BackupMode: FailedEventsOnly
        S3Configuration: 
          RoleARN: !GetAtt FireHoseRole.Arn
          BucketARN: !Sub 'arn:aws:s3:::${S3BucketBkp}'
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 50
          CompressionFormat: UNCOMPRESSED
          Prefix: firehose/

  ###Role for VPC FlowLogs
  FlowLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref VCPtoCloudwatchRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - vpc-flow-logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: vpc_cloudwatch_politica
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  ### Cloudwatch Log Group
  CloudwatchGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref LogGroupNameLabel
      RetentionInDays: 1

  ### VPC Flow Log resource creation
  VPCFlowGroup:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref CloudwatchGroup
      ResourceId: !Ref VpcName
      ResourceType: VPC
      TrafficType: ALL

  ###Role for the sending from Cloudwatch to Firehose
  CWtoFHRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref CWtoFHRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Join
                - ''
                - - 'logs.'
                  - !Ref 'AWS::Region'
                  - '.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: "/"

  ##Managed policy for the Cloudwatch to Firehose Role
  CwtoFHPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: CW_2_FH_Policy
      Path: "/"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'firehose:*'
            Resource: !GetAtt FHtoSplunk.Arn
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource: !GetAtt CWtoFHRole.Arn
      Roles:
        - !Ref CWtoFHRole

  ####Subscription filter construction
  SubscriptionFilter:
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt FHtoSplunk.Arn
      FilterPattern: ""
      LogGroupName: !Ref CloudwatchGroup
      RoleArn: !GetAtt CWtoFHRole.Arn
  
  ##### CWE #####

  ##### CloudTrail Event #####
  # Source - CloudTrail - Event Rule to get notifications of activities in CloudTrail into Firehose and Splunk - AWS::Events::Rule
  CloudTrailEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
      State: ENABLED
      Targets:
        - RoleArn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryRole
              - Arn
          Id: splunk_cloudtrail_firehose_target
          Arn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryStream
              - Arn
  
  # Source - CloudTrail - Event Rule to get notifications of activities(confiuration changes) in CloudTrail into Firehose and Splunk - AWS::Events::Rule
  ConfigNotificationEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Configuration Item Change
      State: ENABLED
      Targets:
        - RoleArn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryRole
              - Arn
          Id: splunk_config_notification_firehose_target
          Arn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryStream
              - Arn
  
  # Source - Firehose Component - Firehose DeliveryRole- AWS::IAM::Role
  CWEFirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
  
  # Source - Firehose Component - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream
  CWEFirehoseDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource:
              - Fn::GetAtt:
                  - CWEFirehoseDeliveryStream
                  - Arn
            Effect: Allow
      Roles:
        - Ref: CWEFirehoseDeliveryRole
  ##### CloudTrail Event #####

  ### Lambda Function that unzips files related to Cloudwatch Events(CWE)
  # Source - Firehose Components - FireHose Processor - AWS::Lambda::Function       
  # CWEFirehoseProcessor:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       S3Bucket:
  #         Fn::FindInMap:
  #           - BucketMap
  #           - Ref: AWS::Region
  #           - BucketName
  #       S3Key: !Ref FileCodeCWE
  #     Description: Stream events from CloudWatch Events to Splunk using HTTP event collector
  #     MemorySize: 512
  #     Handler: lambda_function.handler
  #     Role:
  #       Fn::GetAtt:
  #         - CWEFirehoseProcessorRole
  #         - Arn
  #     Timeout: 300
  #     Runtime: python3.7
      
  CWEFirehoseProcessorLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Stream events from CloudWatch Events to Splunk using HTTP event collector
      MemorySize: 512
      FunctionName: !Ref FunctionLambda4FirehoseNameCWE
      CodeUri: ./src/CWE
      Handler: lambda_function.handler
      Runtime: python3.7
      Timeout: 300
      Tracing: Active
      Role:
        Fn::GetAtt:
          - CWEFirehoseProcessorRole
          - Arn
  
  # Source - Firehose Component - Firehose Processor Role - AWS::IAM::Role
  CWEFirehoseProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CWEFirehoseProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  # Source - Firehose Components - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream
  CWEFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      SplunkDestinationConfiguration:
        S3Configuration:
          CompressionFormat: UNCOMPRESSED
          BucketARN:
            Fn::GetAtt:
              - CWEBackupS3Bucket
              - Arn
          RoleARN:
            Fn::GetAtt:
              - CWEBackupS3Role
              - Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 1
        HECEndpointType: Event
        HECToken: 1234-***********-3421
        HECAcknowledgmentTimeoutInSeconds: 180
        RetryOptions:
          DurationInSeconds: 300
        HECEndpoint: https://xyz.com:8088
        S3BackupMode: FailedEventsOnly
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWEFirehoseProcessorLambdaFunction
                      - Arn
                - ParameterName: RoleArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWEBackupS3Role
                      - Arn
              Type: Lambda
      DeliveryStreamType: DirectPut

  # Source - Firehose Components - AWS S3 Bucket for file backup - AWS::S3::Bucket
  CWEBackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  
  # Source - Firehose Components - AWS IAM Role for file backup into S3  - AWS::IAM::Role
  CWEBackupS3Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: CWEBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ""
                Effect: Allow
                Action:
                  - glue:GetTableVersions
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Join:
                        - ""
                        - - kinesis.
                          - Ref: AWS::Region
                          - .amazonaws.com
                  StringLike:
                    kms:EncryptionContext:aws:kinesis:arn:
                      Fn::Join:
                        - ""
                        - - "arn:aws:kinesis:"
                          - Ref: AWS::Region
                          - ":"
                          - Ref: AWS::AccountId
                          - :stream/%FIREHOSE_STREAM_NAME%
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
  ##### CWE ##### 

  ##### CWL #####
  ### Lambda Function that unzips logs related to Cloudwatch Logs(CWL)
  # Source - Firehose Components - FireHose Processor - AWS::Lambda::Function
  # CWLFirehoseProcessor:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       S3Bucket:
  #         Fn::FindInMap:
  #           - BucketMap
  #           - Ref: AWS::Region
  #           - BucketName
  #       S3Key: !Ref FileCodeCWL
  #     Description: Stream events from CloudWatch Logs to Splunk using HTTP event collector
  #     MemorySize: 512
  #     Handler: lambda_function.handler
  #     Role:
  #       Fn::GetAtt:
  #         - CWLFirehoseProcessorRole
  #         - Arn
  #     Timeout: 300
  #     Runtime: python3.7
  
  CWLFirehoseProcessorLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Stream events from CloudWatch Logs to Splunk using HTTP event collector
      MemorySize: 512
      FunctionName: !Ref FunctionLambda4FirehoseNameCWL
      CodeUri: ./src/CWL
      Handler: lambda_function.handler
      Runtime: python3.7
      Timeout: 300
      Tracing: Active
      Role:
        Fn::GetAtt:
          - CWLFirehoseProcessorRole
          - Arn

  # Source - Firehose Component - Firehose Processor Role - AWS::IAM::Role
  CWLFirehoseProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CWLFirehoseProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*:*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  # Source - Firehose Components - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream
  CWLFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      SplunkDestinationConfiguration:
        S3Configuration:
          CompressionFormat: UNCOMPRESSED
          BucketARN:
            Fn::GetAtt:
              - CWLBackupS3Bucket
              - Arn
          RoleARN:
            Fn::GetAtt:
              - CWLBackupS3Role
              - Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 1
        HECEndpointType: Event
        HECToken: 1234-*****9e6
        HECAcknowledgmentTimeoutInSeconds: 180
        RetryOptions:
          DurationInSeconds: 300
        HECEndpoint: https://xyz.com:8088
        S3BackupMode: FailedEventsOnly
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWLFirehoseProcessorLambdaFunction
                      - Arn
                - ParameterName: RoleArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWLBackupS3Role
                      - Arn
              Type: Lambda
      DeliveryStreamType: DirectPut
  
  # Source - Firehose Components - AWS S3 Bucket for file backup - AWS::S3::Bucket
  CWLBackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  
  # Source - Firehose Components - AWS IAM Role for file backup into S3  - AWS::IAM::Role
  CWLBackupS3Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: CWLBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ""
                Effect: Allow
                Action:
                  - glue:GetTableVersions
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:kms:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :key/%SSE_KEY_ARN%
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Join:
                        - ""
                        - - kinesis.
                          - Ref: AWS::Region
                          - .amazonaws.com
                  StringLike:
                    kms:EncryptionContext:aws:kinesis:arn:
                      Fn::Join:
                        - ""
                        - - "arn:aws:kinesis:"
                          - Ref: AWS::Region
                          - ":"
                          - Ref: AWS::AccountId
                          - :stream/%FIREHOSE_STREAM_NAME%
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
  ##### CWL #####

  ##### VPC #####
  ### Lambda Function that unzips logs related to VPC Flow Logs(VPC)
  # Source - Firehose Components - FireHose Processor - AWS::Lambda::Function
  # VPCFirehoseProcessor:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       S3Bucket:
  #         Fn::FindInMap:
  #           - BucketMap
  #           - Ref: AWS::Region
  #           - BucketName
  #       S3Key: !Ref FileCodeVPC
  #     Description: Stream events from VPC Flow Logs to Splunk using HTTP event collector
  #     MemorySize: 512
  #     Handler: lambda_function.handler
  #     Role:
  #       Fn::GetAtt:
  #         - VPCFirehoseProcessorRole
  #         - Arn
  #     Timeout: 300
  #     Runtime: python3.7

  VPCFirehoseProcessorLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Stream events from VPC Flow Logs to Splunk using HTTP event collector
      MemorySize: 512
      FunctionName: !Ref FunctionLambda4FirehoseNameVPC
      CodeUri: ./src/VPC
      Handler: lambda_function.handler
      Runtime: python3.7
      Timeout: 300
      Tracing: Active
      Role:
        Fn::GetAtt:
          - VPCFirehoseProcessorRole
          - Arn
  
  # Source - Firehose Component - Firehose Processor Role - AWS::IAM::Role
  VPCFirehoseProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: VPCFirehoseProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*:*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  
  # Source - Firehose Components - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream
  VPCFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      SplunkDestinationConfiguration:
        S3Configuration:
          CompressionFormat: UNCOMPRESSED
          BucketARN:
            Fn::GetAtt:
              - VPCBackupS3Bucket
              - Arn
          RoleARN:
            Fn::GetAtt:
              - VPCBackupS3Role
              - Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 1
        HECEndpointType: Event
        HECToken: 1234-***********-3421
        HECAcknowledgmentTimeoutInSeconds: 180
        RetryOptions:
          DurationInSeconds: 300
        HECEndpoint: https://xyz.com:8088
        S3BackupMode: FailedEventsOnly
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue:
                    Fn::GetAtt:
                      - VPCFirehoseProcessorLambdaFunction
                      - Arn
                - ParameterName: RoleArn
                  ParameterValue:
                    Fn::GetAtt:
                      - VPCBackupS3Role
                      - Arn
              Type: Lambda
      DeliveryStreamType: DirectPut
  
  # Source - Firehose Components - AWS S3 Bucket for file backup - AWS::S3::Bucket
  VPCBackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  
  # Source - Firehose Components - AWS IAM Role for file backup into S3  - AWS::IAM::Role
  VPCBackupS3Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: VPCBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: "*"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
  ##### VPC #####

Outputs:
  # StackRef:
  #   Value: !Ref NestedCall
  # OutputFromNestedStack:
  #   Value: !GetAtt NestedCall.Outputs.BucketName
  FireHoseRolName:
    Value: !Ref FireHoseRole
  FireHoseRolARN:
    Value: !GetAtt FireHoseRole.Arn
  VPCFlowLogGupName:
    Value: !Ref VPCFlowGroup
  CWEFirehoseProcessorLambdaFunctionName:
    Description: The lambda Function Arn
    Value: !GetAtt CWEFirehoseProcessorLambdaFunction.Arn
  CWLFirehoseProcessorLambdaFunctionName:
    Description: The lambda Function Arn
    Value: !GetAtt CWLFirehoseProcessorLambdaFunction.Arn   
  VPCFirehoseProcessorLambdaFunctionName:
    Description: The lambda Function Arn
    Value: !GetAtt VPCFirehoseProcessorLambdaFunction.Arn
