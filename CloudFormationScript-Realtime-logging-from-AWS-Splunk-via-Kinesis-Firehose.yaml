# Pre-Requirements:
# - HEC endpoints are considered available and reachable
# - Least necessary permissions listed below are assigned to the pipeline role which will run the CFT in respective environments non-prod, prod etc.
#   "firehose:*", "events:*", "s3:*", "logs:*", "lambda:*"
#   Consideration:
#   ==============
#   Only 1 VPC is considered below, where we are capturing VPC Flow logs for the VPC. So inorder to run this CFT script fill the paramater 'VpcName' with VPC.
#   PreRequisite : zip the lambda_function.py and and upload in a s3 bucket i.e. lambdas-kinesis2splunk-eu-central-1 to be deployed, unless lamdas not changed there is no need redeploy each time. It's only one time effort.
#                  e.g: unlitimate code uri should look like this - s3://lambdas-kinesis2splunk-eu-central-1/VPC/lambda_function.py.zip
#   PreRequisite to delete the stack : Empty bucket content of CWEBackupS3Bucket, S3BucketBkp
#   PreRequisite to create the stack : Delete log Group 'VPCtoSplunkLogGroup'

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: This Template deploys a Kinesis Firehose for Splunk.
###
### Template input parameters
###  
Parameters:
  SplunkHecURL:
    Type: String
    Default: 'https://x.x.x.x:8088'  #'https://xyz.com:8088'
  
  SplunkHecToken:
    Type: String
    Default: 'xxxx-xxxx-xxxxx-xxxxx'
  
  VpcName:
    Type: AWS::EC2::VPC::Id
    Description: VPC Identifier
    Default: vpc-xxxxxxxxx #Tracking logs of an existing VPC
  
  BucketNameValue:
    Type: String
    Default: eu-west-1-lambda
    
  LogGroupNameLabel:
    Type: String
    Default: VPCtoSplunkLogGroup
    
  CWtoFHRoleName:
    Type: String
    Default: CloudWatchtoFireHoseRole
  
  VCPtoCloudwatchRoleName:
    Type: String
    Default: VCPtoCloudwatchRole
  
  Workvalue:
    Type: String
    Default: -work02
    
  FunctionLambda4FirehoseNameCWE:
    Type: String
    Default: FunctionLambda4FirehoseCWE
  
  FunctionLambda4FirehoseNameCWL:
    Type: String
    Default: FunctionLambda4FirehoseCWL
  
  FunctionLambda4FirehoseNameVPC:
    Type: String
    Default: FunctionLambda4FirehoseVPC
  
  VPCFireHoseRoleName:
    Type: String
    Default: VPCFirehoseProcessorRole
  
  VPCFlowLogsToSplunkDeliveryStreamName:
    Type: String
    Default: VPCFlowLogsToSplunkDeliveryStream
  
  CWLToFirehoseDeliveryStreamName:
    Type: String
    Default: CWLFirehoseDeliveryStream
  
  CWEToFirehoseDeliveryStreamName:
    Type: String
    Default: CWEFirehoseDeliveryStream
  
###
### Template Resources
###
Resources:
  ### Firehose's work bucket
  S3BucketBkp:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - ''
        - - 'firehose-'
          - !Ref 'AWS::AccountId'
          - !Ref 'Workvalue'
      VersioningConfiguration:
        Status: Enabled

  #------------------------------------------------------------------------------
  # VPC LOGS : Fetching VPC FlowLogs and pushing into splunk via kinesis firehose
  #------------------------------------------------------------------------------
  FlowLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref VCPtoCloudwatchRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - vpc-flow-logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      Policies:
        - PolicyName: vpc_cloudwatch_politica
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*

  # ### Cloudwatch Log Group
  CloudwatchGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupNameLabel
      RetentionInDays: 1
  
  # ### VPC Flow Log resource creation
  VPCFlowGroup:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt FlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref CloudwatchGroup
      ResourceId: !Ref VpcName
      ResourceType: VPC
      TrafficType: ALL

  # ###Role for the sending from Cloudwatch to Firehose
  CWtoFHRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref CWtoFHRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Join
                - ''
                - - 'logs.'
                  - !Ref 'AWS::Region'
                  - '.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: "/"

  ##Managed policy for the Cloudwatch to Firehose Role
  CwtoFHPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: CW_2_FH_Policy
      Path: "/"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'firehose:*'
            Resource: !GetAtt VPCFirehoseDeliveryStream.Arn
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource: !GetAtt CWtoFHRole.Arn
      Roles:
        - !Ref CWtoFHRole

  #-------------------------------------------------------------------------------------------------------------------------------
  # CloudTrail Event LOGS : Fetching CloudTrail Event and pushing into splunk via kinesis firehose
  # Source - CloudTrail - Event Rule to get notifications of activities in CloudTrail into Firehose and Splunk - AWS::Events::Rule
  #-------------------------------------------------------------------------------------------------------------------------------
  CloudTrailEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
          - AWS Console Sign In via CloudTrail
      State: ENABLED
      Targets:
        - RoleArn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryRole
              - Arn
          Id: splunk_cloudtrail_firehose_target
          Arn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryStream
              - Arn
  
  # Source - CloudTrail - Event Rule to get notifications of activities(confiuration changes) in CloudTrail into Firehose and Splunk - AWS::Events::Rule
  ConfigNotificationEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Configuration Item Change
      State: ENABLED
      Targets:
        - RoleArn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryRole
              - Arn
          Id: splunk_config_notification_firehose_target
          Arn:
            Fn::GetAtt:
              - CWEFirehoseDeliveryStream
              - Arn
  
  # Source - Firehose Component - Firehose DeliveryRole- AWS::IAM::Role
  CWEFirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
  
  # Source - Firehose Component - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream
  CWEFirehoseDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - firehose:PutRecord
              - firehose:PutRecordBatch
            Resource:
              - Fn::GetAtt:
                  - CWEFirehoseDeliveryStream
                  - Arn
            Effect: Allow
      Roles:
        - Ref: CWEFirehoseDeliveryRole
  #-------------------------------------------------------------------------------------------------------------------------------
  # CloudWatch Event LOGS : Fetching Cloudwatch Event logs and pushing into splunk via kinesis firehose
  # Source - CloudWatch - Event Rule to get notifications of activities in CloudTrail into Firehose and Splunk - AWS::Events::Rule
  #-------------------------------------------------------------------------------------------------------------------------------  
  ##### CWE #####
  ### Lambda Function that unzips files related to Cloudwatch Events(CWE)
  # Source - Firehose Components - FireHose Processor - AWS::Lambda::Function      
  CWEFirehoseProcessorLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Stream events from CloudWatch Events to Splunk using HTTP event collector
      MemorySize: 512
      FunctionName: !Ref FunctionLambda4FirehoseNameCWE
      CodeUri: s3://lambdas-kinesis2splunk-eu-central-1/CWE/lambda_function.py.zip  #Local Reference use './src/CWE'
      Handler: lambda_function.handler
      Runtime: python3.7
      Timeout: 300
      Tracing: Active
      Role:
        Fn::GetAtt:
          - CWEFirehoseProcessorRole
          - Arn
  
  # Source - Firehose Component - Firehose Processor Role - AWS::IAM::Role
  CWEFirehoseProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CWEFirehoseProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: "arn:aws:firehose:eu-central-1:xxxxxxxxxxxxx:*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  # Source - Firehose Components - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream
  CWEFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      SplunkDestinationConfiguration:
        S3Configuration:
          CompressionFormat: UNCOMPRESSED
          BucketARN:
            Fn::GetAtt:
              - CWEBackupS3Bucket
              - Arn
          RoleARN:
            Fn::GetAtt:
              - CWEBackupS3Role
              - Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 1
        HECEndpointType: Event
        HECToken: !Ref SplunkHecToken
        HECAcknowledgmentTimeoutInSeconds: 180
        RetryOptions:
          DurationInSeconds: 300
        HECEndpoint: !Ref SplunkHecURL
        S3BackupMode: FailedEventsOnly
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWEFirehoseProcessorLambdaFunction
                      - Arn
                - ParameterName: RoleArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWEBackupS3Role
                      - Arn
              Type: Lambda
      DeliveryStreamType: DirectPut
      DeliveryStreamName: !Ref CWEToFirehoseDeliveryStreamName

  # Source - Firehose Components - AWS S3 Bucket for file backup - AWS::S3::Bucket
  CWEBackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  
  # Source - Firehose Components - AWS IAM Role for file backup into S3  - AWS::IAM::Role
  CWEBackupS3Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: CWEBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ""
                Effect: Allow
                Action:
                  - glue:GetTableVersions
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Join:
                        - ""
                        - - kinesis.
                          - Ref: AWS::Region
                          - .amazonaws.com
                  StringLike:
                    kms:EncryptionContext:aws:kinesis:arn:
                      Fn::Join:
                        - ""
                        - - "arn:aws:kinesis:"
                          - Ref: AWS::Region
                          - ":"
                          - Ref: AWS::AccountId
                          - :stream/%FIREHOSE_STREAM_NAME%
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
  #-------------------------------------------------------------------------------------------------------------------------------
  # CloudWatch LOGS : Fetching Cloudwatch logs and pushing into splunk via kinesis firehose
  # Source - CWL - CloudWatch - All cloudwatch logs into Firehose and Splunk - AWS::Events::Rule
  #-------------------------------------------------------------------------------------------------------------------------------  
  ##### CWL #####
  ### Lambda Function that unzips logs related to Cloudwatch Logs(CWL)
  # Source - Firehose Components - FireHose Processor - AWS::Lambda::Function
  CWLFirehoseProcessorLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Stream events from CloudWatch Logs to Splunk using HTTP event collector
      MemorySize: 512
      FunctionName: !Ref FunctionLambda4FirehoseNameCWL
      CodeUri: s3://lambdas-kinesis2splunk-eu-central-1/CWL/lambda_function.py.zip
      Handler: lambda_function.handler
      Runtime: python3.7
      Timeout: 300
      Tracing: Active
      Role:
        Fn::GetAtt:
          - CWLFirehoseProcessorRole
          - Arn

  # Source - Firehose Component - Firehose Processor Role - AWS::IAM::Role
  CWLFirehoseProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CWLFirehoseProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*:*
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: "arn:aws:firehose:eu-central-1:xxxxxxxxxxxxx:deliverystream/CWLFirehoseDeliveryStream"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  # Source - Firehose Components - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream
  CWLFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      SplunkDestinationConfiguration:
        S3Configuration:
          CompressionFormat: UNCOMPRESSED
          BucketARN:
            Fn::GetAtt:
              - CWLBackupS3Bucket
              - Arn
          RoleARN:
            Fn::GetAtt:
              - CWLBackupS3Role
              - Arn
          BufferingHints:
            IntervalInSeconds: 300
            SizeInMBs: 1
        HECEndpointType: Event
        HECToken: !Ref SplunkHecToken
        HECAcknowledgmentTimeoutInSeconds: 180
        RetryOptions:
          DurationInSeconds: 300
        HECEndpoint: !Ref SplunkHecURL
        S3BackupMode: FailedEventsOnly
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWLFirehoseProcessorLambdaFunction
                      - Arn
                - ParameterName: RoleArn
                  ParameterValue:
                    Fn::GetAtt:
                      - CWLBackupS3Role
                      - Arn
              Type: Lambda
      DeliveryStreamType: DirectPut
      DeliveryStreamName: !Ref CWLToFirehoseDeliveryStreamName
  
  # Source - Firehose Components - AWS S3 Bucket for file backup - AWS::S3::Bucket
  CWLBackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  
  # Source - Firehose Components - AWS IAM Role for file backup into S3  - AWS::IAM::Role
  CWLBackupS3Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: CWLBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ""
                Effect: Allow
                Action:
                  - glue:GetTableVersions
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                Resource: "*"
              - Sid: ""
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:kms:"
                      - Ref: AWS::Region
                      - ":"
                      - Ref: AWS::AccountId
                      - :key/%SSE_KEY_ARN%
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Join:
                        - ""
                        - - kinesis.
                          - Ref: AWS::Region
                          - .amazonaws.com
                  StringLike:
                    kms:EncryptionContext:aws:kinesis:arn:
                      Fn::Join:
                        - ""
                        - - "arn:aws:kinesis:"
                          - Ref: AWS::Region
                          - ":"
                          - Ref: AWS::AccountId
                          - :stream/%FIREHOSE_STREAM_NAME%
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
  #-------------------------------------------------------------------------------------------------------------------------------
  # VPC Flow LOGS : Fetching Cloudwatch Event logs and pushing into splunk via kinesis firehose
  # Source - CWL - CloudWatch - All cloudwatch logs into Firehose and Splunk - AWS::Events::Rule
  #-------------------------------------------------------------------------------------------------------------------------------  
  ##### VPC #####
  ### Lambda Function that unzips logs related to VPC Flow Logs(VPC)
  # Source - Firehose Components - FireHose Processor - AWS::Lambda::Function
  VPCFirehoseProcessorLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Stream events from VPC Flow Logs to Splunk via a HTTP event collector
      MemorySize: 512
      FunctionName: !Ref FunctionLambda4FirehoseNameVPC
      CodeUri: s3://lambdas-kinesis2splunk-eu-central-1/VPC/lambda_function.py.zip
      Handler: lambda_function.handler
      Runtime: python3.7
      Timeout: 300
      Tracing: Active
      Role: 'arn:aws:iam::xxxxxxxxxxxxx:role/VPCFirehoseProcessorLambdaFunctionRole'
  
  # Lambda Function Role
  VPCFirehoseProcessorLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: VPCFirehoseProcessorLambdaFunctionRole
      Policies:
        - PolicyName: VPCFirehoseLambdaProcessorPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: "arn:aws:firehose:eu-central-1:xxxxxxxxxxxxx:*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
    
  # Source - Firehose Component - Firehose Processor Role - AWS::IAM::Role
  VPCFirehoseProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: !Ref VPCFireHoseRoleName
      Policies:
        - PolicyName: VPCFirehoseProcessorPolicy
          PolicyDocument: 
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketNameValue}'
                  - !Sub 'arn:aws:s3:::${S3BucketBkp}'
                  - !Sub 'arn:aws:s3:::${S3BucketBkp}/*'
              - Effect: Allow
                Action:
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt VPCFirehoseProcessorLambdaFunction.Arn
                  - !Join [':',[!GetAtt VPCFirehoseProcessorLambdaFunction.Arn,'$LATEST']]
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/${VPCFlowLogsToSplunkDeliveryStreamName}:log-stream:*'
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource: 'arn:aws:firehose:eu-central-1:xxxxxxxxxxxxx:deliverystream/VPCFlowLogsToSplunkDeliveryStream'
              - Effect: Allow
                Action: 
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  

  
  #--------------------------------------------------------------------
  # Kinesis Firehose Delivery Stream that sends VPC Flow logs to Splunk  
  #--------------------------------------------------------------------
  ####Subscription filter construction
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt VPCFirehoseDeliveryStream.Arn
      FilterPattern: ""
      LogGroupName: !Ref CloudwatchGroup
      RoleArn: !GetAtt CWtoFHRole.Arn
  
  # Source - Firehose Components - Firehose Delivery Stream - AWS::KinesisFirehose::DeliveryStream i.e. VPCFlowLogsToSplunkDeliveryStreamName
  VPCFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Ref VPCFlowLogsToSplunkDeliveryStreamName
      DeliveryStreamType: DirectPut
      SplunkDestinationConfiguration:
        HECAcknowledgmentTimeoutInSeconds: 180
        HECEndpoint: !Ref SplunkHecURL
        HECEndpointType: Raw
        HECToken: !Ref SplunkHecToken
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
              - ParameterName: LambdaArn
                ParameterValue: !GetAtt VPCFirehoseProcessorLambdaFunction.Arn
              - ParameterName: RoleArn
                ParameterValue: !GetAtt VPCFirehoseProcessorRole.Arn
              Type: Lambda
        RetryOptions:
          DurationInSeconds: 300
        S3BackupMode: FailedEventsOnly
        S3Configuration: 
          RoleARN: !GetAtt VPCFirehoseProcessorRole.Arn
          BucketARN: !Sub 'arn:aws:s3:::${S3BucketBkp}'
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 50
          CompressionFormat: UNCOMPRESSED
          Prefix: firehose/

  # Source - Firehose Components - AWS S3 Bucket for file backup - AWS::S3::Bucket
  VPCBackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  
  # Source - Firehose Components - AWS IAM Role for file backup into S3  - AWS::IAM::Role
  VPCBackupS3Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      Policies:
        - PolicyName: VPCBackupS3Role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource: "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunctionConfiguration
                Resource: "*"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Sid: ""
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com

Outputs:
  CWEFirehoseProcessorLambdaFunctionName:
    Description: The lambda Function Arn
    Value: !GetAtt CWEFirehoseProcessorLambdaFunction.Arn
  CWLFirehoseProcessorLambdaFunctionName:
    Description: The lambda Function Arn
    Value: !GetAtt CWLFirehoseProcessorLambdaFunction.Arn   
  VPCFirehoseProcessorLambdaFunctionName:
    Description: The lambda Function Arn
    Value: !GetAtt VPCFirehoseProcessorLambdaFunction.Arn
